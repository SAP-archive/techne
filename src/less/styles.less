@import url(https://fonts.googleapis.com/css?family=Dosis:400,500,600);
@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,700,300,400italic,600);


@hytech-path: "../";

@import "@{bower-path}/bootstrap/less/bootstrap";
@import (less) "@{bower-path}/select2/select2.css";


// Globals
@import "./globals/_variables";
@import (optional) "./globals/_resource-paths";
@import "./globals/_utils";
@import "./overwrites/__overwrites.less";
@import "./components/_layout-section";

// Navigation
//
// YaaS IO uses an off-canvas navigation pattern to maximize screen real estate.
// A “parent/child” relationship is used to control the views in the panels. The “parent” panel should contain all navigation items and the ‘child’ panel should contain the content or tooling meant for interaction.
// It is not recommended additional panels are created or nested within the existing parent/child structure as this will put the overall flow and focus of content at risk.
//
// Pattern 1
@import "./techne-patterns/_navigation.less";


// Data Set Display
//
// Pattern 2
@import "./techne-patterns/_data-set-display.less";


// Action Bar
//
// The Action Bar sits at the top of an object detail page and allows for saving, cancelling, going back, and other actions upon the object. General guidelines for this pattern are as follows:
// <ul>
//  <li>The Action Bar sits at the top of the page </li>
//  <li>When users come to a new/create object, the Cancel and Save are both visible and enabled.</li>
//  <li>When there is a primary button other than Save, the Primary button should always be active (see screenshots).  There is no Cancel link in this case.</li>
//  <li>On an object page in edit mode, before any edits have been made Cancel and Save are not visible or enabled. A user must click or tap inside a field to make visible and enable the Save and Cancel actions.</li>
//  <li>In the new or edit scenario if a user clicks on Cancel, the form is cleared and the user is taken back to the page they came from.</li>
//  <li>If the user leaves a page in the middle of create or edit, they should receive a confirmation dialogue asking them to confirm whether they want to leave the page without saving (see screenshot)</li>
// </ul>
//
// Pattern 3
@import "./techne-patterns/_action-bar.less";


// Cards
//
// Cards are used to display information in a visual, scannable manner. Use in scenarios when users want to associate an image with data, such as a Project or Site, or in association with user accounts where it is helpful to associate an image with a person using the system.
//
// Pattern 4
@import "./techne-patterns/_usercards";
@import "./techne-patterns/_data-card.less";
@import "./techne-patterns/_data.less";


// Tables
//
// At Desktop and Tablet inflections, it is recommended to show 25 rows of data before pagination. At the Mobile inflection, it is recommended to show 10 rows of data before pagination. 
// When used as a summary for a complete list on a mixed content page, display 5 cards before “See All.”
//
// Pattern 5
@import "./techne-patterns/_tables.less";


// Trees
//
// Tree component with multiple columns
//
// Pattern 6
@import "./techne-patterns/_trees.less";


// Dialogues/Modals
//
// <p>Modals can be used to facilitate in-context tasks, wizards, and interactive notifications. Modals can contain other components or patterns to achieve task completion. Use modals sparingly and ensure correct display in mobile devices.<p>
// <p>When used, at a minimum a modal should have a a clear header title and a close action (X). Other buttons or actions are at the discretion of the team and task at-hand.</p>
// <p>If there is a primary and secondary action available as part of the modal, for example, "Save" and "Cancel" these actions should follow the standard pattern guidelines where the Primary action uses the Primary Button component placed in the bottom-right corner of the modal, and to the right of the "Cancel" button link.</p>
//
// Pattern 7
@import "./techne-patterns/_dialogues-modals.less";


// Localization Editor
//
// The Localization component is used when any content needs to allow for translation into a multiple languages or currencies.
//
// Pattern 8
@import "./techne-patterns/_locals-editor";


// Wizards
//
// Wizards are made up of the modal component and button and/or button link components. Use the wizard pattern when you want to guide people through a step-by-step process. Typically a wizard will have a ‘next’ and ‘previous’ action and a “Save” action at the last step.
//
// Pattern 9
@import "./techne-patterns/_wizards";


// Tours
//
// A “Tour” should be used when a new visitor comes to a UI module.  It gives a step-by-step explanation of what the UI Module covers and where to go to accomplish certain tasks.  The ‘Tour’ pattern uses the “Tour Bubble” UI component.
//
// Pattern 10
@import "./techne-patterns/_tours";


// Tour Bubble
//
// Use the Tour UI component to put together a comprehensive overview of UIs to new visitors.
//
// Pattern 11
@import './techne-patterns/_popover.less';


// Feedback Form 
//
// Standardized feedback form pattern. Click feedback button below to open form.
//
// Pattern 12
@import "./techne-patterns/_feedback-form";

///////////////////
// END PATTERNS //
/////////////////

// Alerts, Errors & Notifications
//
// Messaging within the application is color-coded to emphasize the level of urgency, but the goal is to limit the number of colors overall to reduce cognitive load. In some cases alerts will allow for dismissal and in other cases alerts must be acted upon in order to complete a task. The color-coded system should allow at-a-glance understanding of allowable actions.
//
// Component 1
@import "./overwrites/_alert.less";


// Buttons
//
// Button and Button Links are used to indicate primary, secondary and tertiary actions on a page.  Used in patterns like page headers, modals and wizards. See Patterns & Layouts for examples of usage.
//
// Component 2
@import './overwrites/_buttons.less';
@import "./components/_forms-toggle";
@import "./components/_back-to-top.less";


// Contextual Menu
//
// The “more” contextual menu is used with Cards or Tables when there is additional functionality available for the data shown in the Card or Table row, and trying to expose that functionality would clutter the interface.
//
// Component 3
@import './overwrites/_dropdowns.less';


// Form Elements
//
// Form Elements include the layout of a field itself, checkboxes, radio buttons and states of a field.  Use these components along with inline help and error state treatements for any form design.
//
// Component 4
@import './overwrites/_forms.less';
@import "./components/_forms-hint-text";
@import "./components/_forms-checkboxes";
@import "./components/_forms-radiobuttons";
@import "./components/_forms-readonly";


// Help and Validation 
//
// To aid Builder users we have established different levels of help and help interaction patterns to address specific interaction and feedback needs.
//
// Component 5
@import "./components/_forms-criticalerroravoidance.less";
@import "./components/_forms-charactercounter.less";
@import "./components/_forms-validationandhelp.less";
@import "./components/_forms-help.less";


// Icons
//
// Icons are used throughout the UI to save space, allow for visual clarity and focus, and for fun.  Icons can be used adaptively if desired, but at this point are used more as visual elements within other components.
//
// Component 6
@import "./components/_icons";


// Lists
//
// Use a Listgroup when data is meant to show in a single column
//
// Component 7
@import './overwrites/_listgroup.less';


// Loading Spinner
//
// CSS based spinner to indicate to the user that some information is processing or loading.
//
// Component 8
@import "./components/_spinner.less";


// Page Content Panels
//
// Panels are used to set apart the content or form elements on a page from the background.  Place patterns and interactions within panels on your pages to achieve visual focus and separation for the tasks at-hand. Used on every page.
//
// Component 9
@import './overwrites/_panels.less';


// Pagination
//
// Use pagination components in conjunction with Tables (recommended) or Cards (if needed) to allow for more efficient performance and quick access to specific records in the overall data set.
//
// Component 10
@import './overwrites/_pagination.less';


// Status Indicators
//
// <p class="kss-lead">Labels should be used within cards and list rows while Pills should be used within Detail panels to give the status more prominence.</p>
// <p>Colors may be used to help highlight various statuses or states. The following colors should be used as a standard, and are reserved for these statues or states.</p>
//  <ul>
//      <li><b>Grey</b> - inactive</li>
//      <li><b>Green</b> - confirmation, approval, generally positive</li>
//      <li><b>Orange</b> - warning, action can be taken</li>
//      <li><b>Red</b> - error, non-approval, generally negative, action can't be taken</li>
//  </ul>
//
// <p><i>Note that information, statuses or states should not be communicated by color alone. It is recommended a label always accompany a color.</i></p>
//
// Component 11
@import './overwrites/_labels.less';
@import './overwrites/_badges.less';


// Tabs
//
// Use Tabs when you need to organize and group information on page while reducing information density.
//
// Component 12
@import './overwrites/_tabs.less';


// Thumbnail Zoom
//
// If a thumbnail image or images are used it is recommended you allow someone to get a larger view. Use this component to allow a larger view.
//
// Component 13
@import "./components/_thumbnail-zoom";


// Tooltip and Popover
//
// Component 14
@import "./components/_tooltip-popover";


// Atoms
//
// Micro CSS things
//

@import "./components/_atoms";


// Vendor
@import "./vendor/_select2";
@import "./components/_tabs-scrollable.less";
@import "./globals/_shame";
